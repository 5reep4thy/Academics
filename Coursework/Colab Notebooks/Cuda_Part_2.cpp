{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Cuda_Part_2.cpp","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOxSQIdqfpDMJ35ossOlKd6"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"ZuKu1QPPbMp3","executionInfo":{"status":"ok","timestamp":1605616187334,"user_tz":-330,"elapsed":6089,"user":{"displayName":"SREEPATHY JAYANAND SREEPATHY JAYANAND","photoUrl":"","userId":"08275889955790806613"}},"outputId":"b76fcfd5-8098-4396-d2ce-d0f792cb9174","colab":{"base_uri":"https://localhost:8080/"}},"source":["!pip install git+git://github.com/andreinechaev/nvcc4jupyter.git"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Collecting git+git://github.com/andreinechaev/nvcc4jupyter.git\n","  Cloning git://github.com/andreinechaev/nvcc4jupyter.git to /tmp/pip-req-build-u19sjt12\n","  Running command git clone -q git://github.com/andreinechaev/nvcc4jupyter.git /tmp/pip-req-build-u19sjt12\n","Building wheels for collected packages: NVCCPlugin\n","  Building wheel for NVCCPlugin (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for NVCCPlugin: filename=NVCCPlugin-0.0.2-cp36-none-any.whl size=4307 sha256=4012ba0584181b0f53d398ce7c2ce66c5e5f9446497228caa3dff002a761dc3e\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-hs7v3_mm/wheels/10/c2/05/ca241da37bff77d60d31a9174f988109c61ba989e4d4650516\n","Successfully built NVCCPlugin\n","Installing collected packages: NVCCPlugin\n","Successfully installed NVCCPlugin-0.0.2\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RtfsPsz-ch_3","executionInfo":{"status":"ok","timestamp":1605616189862,"user_tz":-330,"elapsed":1289,"user":{"displayName":"SREEPATHY JAYANAND SREEPATHY JAYANAND","photoUrl":"","userId":"08275889955790806613"}},"outputId":"97906a68-7f5a-41ec-89e8-b251bcf83d47","colab":{"base_uri":"https://localhost:8080/"}},"source":["%load_ext nvcc_plugin"],"execution_count":2,"outputs":[{"output_type":"stream","text":["created output directory at /content/src\n","Out bin /content/result.out\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"59LOb7I7clKo","executionInfo":{"status":"ok","timestamp":1605616198452,"user_tz":-330,"elapsed":6569,"user":{"displayName":"SREEPATHY JAYANAND SREEPATHY JAYANAND","photoUrl":"","userId":"08275889955790806613"}},"outputId":"63bafee7-ac17-4992-b166-3e09d19cd0f9","colab":{"base_uri":"https://localhost:8080/"}},"source":["%%cu\n","#include<bits/stdc++.h>\n","using namespace std;\n"," __global__ void vecAdd( int *a, int *b,  int *c, int n)\n","{\n","    int id = blockIdx.x*blockDim.x+threadIdx.x;\n","    int bs = blockDim.x;\n","\n","\n","    for (int k = id; k <= n * n - 1; k += bs) {\n","        int tempr = k / n;\n","        int tempc = k % n;\n","        if (tempr >= n)\n","            break;\n","        for (int p = 0; p < n; p++) {\n","            c[tempr * n + tempc] += a[n * tempr + p] * b[tempc + p * n];\n","        }\n","    }\n","\n","}\n"," \n","int main( int argc, char* argv[] )\n","{\n","    int n = 4;\n"," \n","    \n","      int *h_a;\n","     int *h_b;\n","      int *h_c;\n"," \n","     int *d_a;\n","      int *d_b;\n","     int *d_c;\n"," \n","    size_t bytes = n * n * sizeof(int);\n"," \n","    h_a = (int*)malloc(bytes);\n","    h_b = (int*)malloc(bytes);\n","    h_c = (int*)malloc(bytes);\n"," \n","    cudaMalloc(&d_a, bytes);\n","    cudaMalloc(&d_b, bytes);\n","    cudaMalloc(&d_c, bytes);\n"," \n","    int i;\n","    for (int j = 0; j < n; j++)\n","        for ( i = 0; i < n; i++ ) {\n","            h_a[i + n * j] = i;\n","            h_b[i + n * j] = i;\n","        }\n"," \n","    cudaMemcpy( d_a, h_a, bytes, cudaMemcpyHostToDevice);\n","    cudaMemcpy( d_b, h_b, bytes, cudaMemcpyHostToDevice);\n"," \n","    int blockSize, gridSize;\n"," \n","    blockSize = 2;\n"," \n","    gridSize = 1;\n"," \n","    vecAdd<<<gridSize, blockSize>>>(d_a, d_b, d_c, n);\n"," \n","    cudaMemcpy( h_c, d_c, bytes, cudaMemcpyDeviceToHost );\n","    \n","\n","    for (int i = 0; i < n; i++){\n","        for (int j = 0; j < n; j++) {\n","            printf(\"%d \", h_a[i * n + j]);\n","        }\n","        printf(\"\\n\");\n","     }\n"," printf(\"\\n\");\n","    for (int i = 0; i < n; i++){\n","        for (int j = 0; j < n; j++) {\n","            printf(\"%d \", h_b[i * n + j]);\n","        }\n","        printf(\"\\n\");\n","     }\n"," printf(\"\\n\");\n","     for (int i = 0; i < n; i++){\n","        for (int j = 0; j < n; j++) {\n","            printf(\"%d \", h_c[i * n + j]);\n","        }\n","        printf(\"\\n\");\n","     }\n","    \n","    cudaFree(d_a);\n","    cudaFree(d_b);\n","    cudaFree(d_c);\n"," \n","    free(h_a);\n","    free(h_b);\n","    free(h_c);\n"," \n","    return 0;\n","}"],"execution_count":3,"outputs":[{"output_type":"stream","text":["0 1 2 3 \n","0 1 2 3 \n","0 1 2 3 \n","0 1 2 3 \n","\n","0 1 2 3 \n","0 1 2 3 \n","0 1 2 3 \n","0 1 2 3 \n","\n","0 6 12 18 \n","0 6 12 18 \n","0 6 12 18 \n","0 6 12 18 \n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rq-Nk_4uOgsz","executionInfo":{"status":"ok","timestamp":1605616946657,"user_tz":-330,"elapsed":6114,"user":{"displayName":"SREEPATHY JAYANAND SREEPATHY JAYANAND","photoUrl":"","userId":"08275889955790806613"}},"outputId":"a109f6b3-d90f-4ed2-ae47-70537507516e","colab":{"base_uri":"https://localhost:8080/"}},"source":["%%cu\n","#include<bits/stdc++.h>\n","using namespace std;\n","// block matmul\n"," __global__ void vecAdd( int *a, int *b,  int *c, int n)\n","{\n","    int id = blockIdx.x*blockDim.x+threadIdx.x;\n","    int bs = blockDim.x;\n","\n","    int block_Size = 10;\n"," /*\n","    for (int k = id; k <= n * n - 1; k += bs) {\n","        int tempr = k / n;\n","        int tempc = k % n;\n","        if (tempr >= n)\n","            break;\n","        for (int p = 0; p < n; p++) {\n","            c[tempr * n + tempc] += a[n * tempr + p] * b[tempc + p * n];\n","        }\n","    }\n"," */\n","    int row_Block = n / block_Size;\n","    int col_Block = n / block_Size;\n","    \n","    for (int i = 0; i < row_Block; i++) {\n","        for (int j = 0; j < col_Block; j++) {\n","            if ( (i * col_Block + j) % bs == id) \n","            {\n","                for (int k = 0; k < col_Block; k++) {\n","                    for (int ii = i * block_Size; ii < i * block_Size + block_Size; ii++) {\n","                        for (int jj = j * block_Size; jj < j * block_Size + block_Size; jj++) {\n","                            for (int kk = k * block_Size; kk < k * block_Size + block_Size; kk++) \n","                                c[ii * n + jj] += a[ii * n + kk] * b[kk * n + jj];\n","                        }\n","                    }\n","                }\n","            }\n","        }\n","    }\n","    \n","\n","}\n"," \n","int main( int argc, char* argv[] )\n","{\n","    int n = 10;\n","    \n"," \n","    \n","      int *h_a;\n","     int *h_b;\n","      int *h_c;\n"," \n","     int *d_a;\n","      int *d_b;\n","     int *d_c;\n"," \n","    size_t bytes = n * n * sizeof(int);\n"," \n","    h_a = (int*)malloc(bytes);\n","    h_b = (int*)malloc(bytes);\n","    h_c = (int*)malloc(bytes);\n"," \n","    cudaMalloc(&d_a, bytes);\n","    cudaMalloc(&d_b, bytes);\n","    cudaMalloc(&d_c, bytes);\n"," \n","    \n","    for (int j = 0; j < n; j++)\n","        for (int i = 0; i < n; i++ ) {\n","            h_a[i + n * j] = i;\n","            h_b[i + n * j] = 1;\n","        }\n"," \n","    cudaMemcpy( d_a, h_a, bytes, cudaMemcpyHostToDevice);\n","    cudaMemcpy( d_b, h_b, bytes, cudaMemcpyHostToDevice);\n"," \n","    int blockSize, gridSize;\n"," \n","    blockSize = 2;\n"," \n","    gridSize = 1;\n"," \n","    vecAdd<<<gridSize, blockSize>>>(d_a, d_b, d_c, n);\n"," \n","    cudaMemcpy( h_c, d_c, bytes, cudaMemcpyDeviceToHost );\n","    \n","\n","    for (int i = 0; i < n; i++){\n","        for (int j = 0; j < n; j++) {\n","            printf(\"%d \", h_a[i * n + j]);\n","        }\n","        printf(\"\\n\");\n","     }\n"," printf(\"\\n\");\n","    for (int i = 0; i < n; i++){\n","        for (int j = 0; j < n; j++) {\n","            printf(\"%d \", h_b[i * n + j]);\n","        }\n","        printf(\"\\n\");\n","     }\n"," printf(\"\\n\");\n","     for (int i = 0; i < n; i++){\n","        for (int j = 0; j < n; j++) {\n","            printf(\"%d \", h_c[i * n + j]);\n","        }\n","        printf(\"\\n\");\n","     }\n","  \n","    cudaFree(d_a);\n","    cudaFree(d_b);\n","    cudaFree(d_c);\n"," \n","    free(h_a);\n","    free(h_b);\n","    free(h_c);\n"," \n","    return 0;\n","}"],"execution_count":4,"outputs":[{"output_type":"stream","text":["0 1 2 3 4 5 6 7 8 9 \n","0 1 2 3 4 5 6 7 8 9 \n","0 1 2 3 4 5 6 7 8 9 \n","0 1 2 3 4 5 6 7 8 9 \n","0 1 2 3 4 5 6 7 8 9 \n","0 1 2 3 4 5 6 7 8 9 \n","0 1 2 3 4 5 6 7 8 9 \n","0 1 2 3 4 5 6 7 8 9 \n","0 1 2 3 4 5 6 7 8 9 \n","0 1 2 3 4 5 6 7 8 9 \n","\n","1 1 1 1 1 1 1 1 1 1 \n","1 1 1 1 1 1 1 1 1 1 \n","1 1 1 1 1 1 1 1 1 1 \n","1 1 1 1 1 1 1 1 1 1 \n","1 1 1 1 1 1 1 1 1 1 \n","1 1 1 1 1 1 1 1 1 1 \n","1 1 1 1 1 1 1 1 1 1 \n","1 1 1 1 1 1 1 1 1 1 \n","1 1 1 1 1 1 1 1 1 1 \n","1 1 1 1 1 1 1 1 1 1 \n","\n","45 45 45 45 45 45 45 45 45 45 \n","45 45 45 45 45 45 45 45 45 45 \n","45 45 45 45 45 45 45 45 45 45 \n","45 45 45 45 45 45 45 45 45 45 \n","45 45 45 45 45 45 45 45 45 45 \n","45 45 45 45 45 45 45 45 45 45 \n","45 45 45 45 45 45 45 45 45 45 \n","45 45 45 45 45 45 45 45 45 45 \n","45 45 45 45 45 45 45 45 45 45 \n","45 45 45 45 45 45 45 45 45 45 \n","\n"],"name":"stdout"}]}]}